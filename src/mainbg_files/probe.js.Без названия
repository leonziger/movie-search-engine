/* eslint-disable */

'use strict';

(async () => {
  const fetchRouter = async () => {
    const response = await fetch('https://router.nextdns.io/?stack=dual&limit=10000');
    return response.json();
  };

  const fetchInfo = async (hostname) => {
    let info;

    try {
      const response = await fetch(`https://${hostname}/info`);
      info = await response.json();
    } catch (err) {
      console.log(err);
    }

    return info;
  };

  const servers = await fetchRouter();

  const endpoints = [];

  for (const [i, server] of servers.entries()) {
    loop:
    for (const ip of server.ips) {
      const endpoint = {
        server: server.hostname.replace(/^ipv[46]-|\.edge\.nextdns\.io$/, ''),
        routes: [],
      };

      if (i === 0) {
        endpoint.routes.push('geo');
      }

      endpoint.pop = endpoint.server.replace(/-[0-9]+$/, '');

      if (ip.includes(':')) {
        endpoint.ipVersion = 6;
      } else {
        endpoint.ipVersion = 4;
      }

      for (const _endpoint of endpoints) {
        if (endpoint.pop === _endpoint.pop && endpoint.ipVersion === _endpoint.ipVersion) {
          continue loop;
        }
      }

      endpoints.push(endpoint);
    }
  }

  for (const pool of [1, 2]) {
    for (const ipVersion of [4, 6]) {
      const hostname = `ipv${ipVersion}.dns${pool}.nextdns.io`;

      const info = await fetchInfo(hostname);

      if (!info) {
        continue;
      }

      for (const [i, endpoint] of endpoints.entries()) {
        if (info.pop !== endpoint.pop || ipVersion !== endpoint.ipVersion) {
          continue;
        }

        const route = pool === 1 ? 'primary' : 'secondary';

        endpoints[i].routes.push(route);
      }
    }
  }

  for (const [i, endpoint] of endpoints.entries()) {
    const hostname = `ipv${endpoint.ipVersion}-${endpoint.server}.edge.nextdns.io`;

    const info = await fetchInfo(hostname);

    if (window.location.href.includes('ping.nextdns.io') || window.location.href.includes('localhost')) {
      endpoints[i].rtt = info ? Math.round(info.rtt/1000) : null;

      endpoints.sort((a, b) => (a.rtt || 9999) - (b.rtt || 9999));

      document.getElementById('results').innerHTML = '';

      for (const e of endpoints) {
        if (!('rtt' in e)) {
          continue;
        }

        document.getElementById('results').innerHTML += `<b>${e.pop} (IPv${e.ipVersion})</b> ${e.rtt ? e.rtt + ' ms' : 'error'}${e.routes.length > 0 ? `<b> (${e.routes.join(', ')})</b>` : ''}<br/>`;
      }
    }
  }
})();
