{"version":3,"sources":["api/api.js","api/movies/movies.js","components/SearchForm/SearchForm.js","components/Header/Header.js","components/MovieList/MovieNavBar/MovieNavBar.js","components/MovieList/MovieItem/MovieItem.js","components/MovieList/MovieList.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","process","headers","Authorization","TMDB_IMAGE_URL","transformMovie","movie","poster_path","backdrop_path","fetchMovies","config","get","then","data","results","forEach","catch","error","genres","SearchForm","props","Grid","container","spacing","className","item","lg","TextField","InputProps","label","name","color","id","variant","fullWidth","size","value","query","onChange","Button","onClick","submitForm","Header","Paper","position","Container","Typography","component","href","page","totalPages","handleChange","formSubmitHandler","MovieNavBar","totalResults","Pagination","count","shape","changePage","MovieItem","alt","src","title","isNaN","release_date","Date","getFullYear","genre_ids","length","array","cuttedItems","element","ru_name","toLowerCase","slice","decodeGenres","overview","MovieList","state","currentPage","startPage","movies","map","md","sm","key","Footer","App","event","setState","target","searchMovies","filter","moviesApi","params","response","total_pages","total_results","findFilm","React","createRef","preventDefault","infoMessage","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4574df85.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n    baseURL: process.env.REACT_APP_TMDB_API_URL,\r\n    headers: {\r\n        Authorization: `Bearer ${process.env.REACT_APP_TMDB_API_KEY}`\r\n    }\r\n});\r\n","import { api } from '../api';\r\n\r\nconst TMDB_IMAGE_URL = process.env.REACT_APP_TMDB_IMAGE_URL;\r\n\r\nconst transformMovie = (movie) => {\r\n    movie.poster_path = TMDB_IMAGE_URL + movie.poster_path;\r\n    movie.backdrop_path = TMDB_IMAGE_URL + movie.backdrop_path;\r\n};\r\n\r\nexport const fetchMovies = (config) => {\r\n    return api.get('/search/movie', config)\r\n        .then(({ data }) => {\r\n            data.results.forEach(transformMovie);\r\n\r\n            return data;\r\n        })\r\n        .catch((error) => { throw error.data });\r\n};\r\n\r\nexport const genres = [\r\n    {\r\n        \"id\": 28,\r\n        \"name\": \"Action\",\r\n        \"ru_name\": \"Экшн\"\r\n    },\r\n    {\r\n        \"id\": 12,\r\n        \"name\": \"Adventure\",\r\n        \"ru_name\": \"Приключения\"\r\n    },\r\n    {\r\n        \"id\": 16,\r\n        \"name\": \"Animation\",\r\n        \"ru_name\": \"Анимация\"\r\n    },\r\n    {\r\n        \"id\": 35,\r\n        \"name\": \"Comedy\",\r\n        \"ru_name\": \"Комедия\"\r\n    },\r\n    {\r\n        \"id\": 80,\r\n        \"name\": \"Crime\",\r\n        \"ru_name\": \"Криминал\"\r\n    },\r\n    {\r\n        \"id\": 99,\r\n        \"name\": \"Documentary\",\r\n        \"ru_name\": \"Документальный\"\r\n    },\r\n    {\r\n        \"id\": 18,\r\n        \"name\": \"Drama\",\r\n        \"ru_name\": \"Драма\"\r\n    },\r\n    {\r\n        \"id\": 10751,\r\n        \"name\": \"Family\",\r\n        \"ru_name\": \"Семейный\"\r\n    },\r\n    {\r\n        \"id\": 14,\r\n        \"name\": \"Fantasy\",\r\n        \"ru_name\": \"Фентези\"\r\n    },\r\n    {\r\n        \"id\": 36,\r\n        \"name\": \"History\",\r\n        \"ru_name\": \"Исторический\"\r\n    },\r\n    {\r\n        \"id\": 27,\r\n        \"name\": \"Horror\",\r\n        \"ru_name\": \"Ужасы\"\r\n    },\r\n    {\r\n        \"id\": 10402,\r\n        \"name\": \"Music\",\r\n        \"ru_name\": \"Музыкальный\"\r\n    },\r\n    {\r\n        \"id\": 9648,\r\n        \"name\": \"Mystery\",\r\n        \"ru_name\": \"Мистика\"\r\n    },\r\n    {\r\n        \"id\": 10749,\r\n        \"name\": \"Romance\",\r\n        \"ru_name\": \"Романтический\"\r\n    },\r\n    {\r\n        \"id\": 878,\r\n        \"name\": \"Science Fiction\",\r\n        \"ru_name\": \"Научная фантастика\"\r\n    },\r\n    {\r\n        \"id\": 10770,\r\n        \"name\": \"TV Movie\",\r\n        \"ru_name\": \"телефильм\"\r\n    },\r\n    {\r\n        \"id\": 53,\r\n        \"name\": \"Thriller\",\r\n        \"ru_name\": \"триллер\"\r\n    },\r\n    {\r\n        \"id\": 10752,\r\n        \"name\": \"War\",\r\n        \"ru_name\": \"Военный\"\r\n    },\r\n    {\r\n        \"id\": 37,\r\n        \"name\": \"Western\",\r\n        \"ru_name\": \"Вестерн\"\r\n    }\r\n]","import React from \"react\";\r\nimport { Grid, Button, TextField } from '@material-ui/core';\r\nimport './SearchForm.css';\r\n\r\nexport const SearchForm  = (props) => {\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n            <form className=\"search-form\">\r\n                <Grid item lg={11}>\r\n                    <TextField\r\n                        InputProps = {{className : 'whiteBg'}}\r\n                        label=\"Поиск фильма\"\r\n                        name=\"film\"\r\n                        color=\"primary\"\r\n                        id=\"outlined-basic\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        size=\"medium\"\r\n                        value={props.query}\r\n                        onChange={props.onChange}\r\n                    />\r\n                </Grid>\r\n                <Grid item lg={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={props.submitForm}>Поиск</Button>\r\n                </Grid>\r\n            </form>\r\n        </Grid>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Container, Paper, Typography } from '@material-ui/core';\r\nimport { SearchForm } from '../SearchForm';\r\nimport './Header.css';\r\n\r\nexport const Header = (props) => {\r\n\r\n    return (\r\n        <Paper position=\"fixed\">\r\n            <Container>\r\n                <Typography variant=\"h1\" component=\"h2\">\r\n                    <a className=\"header-title\" href=\"/\">Movie Search Engine</a>\r\n                </Typography>\r\n                <SearchForm\r\n                    query={props.query}\r\n                    page={props.page}\r\n                    totalPages={props.totalPages}\r\n                    onChange = {props.handleChange}\r\n                    formSubmitHandler={props.formSubmitHandler}\r\n                    submitForm={props.submitForm}\r\n                />\r\n            </Container>\r\n        </Paper>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './MovieNavBar.css';\r\n\r\nexport const MovieNavBar= (props) => {\r\n\r\n    return(\r\n        <div className=\"movie-search__container\">\r\n            <div className=\"movie-search-result\">По запросу \"{props.query}\" найдено {props.totalResults} результатов</div>\r\n            <Pagination\r\n                page={props.page}\r\n                count={props.totalPages}\r\n                variant=\"outlined\"\r\n                shape=\"rounded\"\r\n                onChange={props.changePage}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { genres} from \"../../../api/movies\";\r\nimport './MovieItem.css';\r\n\r\nexport const MovieItem = (props) => {\r\n\r\n    const decodeGenres = (array) => {\r\n        let items = '', cuttedItems = '';\r\n        array.forEach((item) => {\r\n            genres.forEach((element)=>{\r\n                if (element.id === item ) {\r\n                    cuttedItems += element.ru_name.toLowerCase() + ', ';\r\n                }\r\n            });\r\n        });\r\n        items = cuttedItems.slice(0, -2);\r\n        return items;\r\n    };\r\n\r\n    return (\r\n        <div className=\"card\">\r\n\r\n            <div className=\"card-img\">\r\n                <img\r\n                    className=\"card-img-top\"\r\n                    alt=\"\"\r\n                    src={props.movie.backdrop_path || props.movie.poster_path}\r\n                />\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"card-title\">{props.movie.title}\r\n                    { isNaN(props.movie.release_date) ? \" (\" + new Date(props.movie.release_date).getFullYear()+\")\" : '' }\r\n                </div>\r\n                {props.movie.genre_ids.length>0 ? <div className=\"card-genres\"><b>Жанр:&nbsp;</b>{decodeGenres(props.movie.genre_ids)}</div> : ''}\r\n                <div className=\"card-overview\">{props.movie.overview}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Container, Grid } from '@material-ui/core';\r\nimport { MovieNavBar } from \"./MovieNavBar\";\r\nimport { MovieItem  } from \"./MovieItem\";\r\n\r\nexport const MovieList = (props) => {\r\n\r\n    return (\r\n        <Container>\r\n\r\n            {props.data.state.totalResults > 0\r\n                ? <div>\r\n                    <MovieNavBar\r\n                        query={props.data.state.query}\r\n                        currentPage={props.data.state.startPage}\r\n                        totalPages={props.data.state.totalPages}\r\n                        totalResults={props.data.state.totalResults}\r\n                        changePage={props.data.changePage}\r\n                    />\r\n                        <Grid container spacing={4}>\r\n                            {props.data.state.movies.map(movie =>\r\n                                <Grid item lg={3} md={4} sm={6} key={movie.id}>\r\n                                    <MovieItem key={movie.id} movie={movie}/>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                </div>\r\n                :\r\n                <div className=\"movie-search-nothing\">По данному запросу ничего не найдено</div>\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport './Footer.css';\r\n\r\nexport function Footer() {\r\n\r\n    return(\r\n        <div className=\"footer\">\r\n            <div className=\"container footer-copy\">Movie Search Engine. Copyright 2020.</div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport * as moviesApi from './api/movies';\nimport 'typeface-roboto';\nimport { Header } from './components/Header';\nimport { MovieList } from './components/MovieList';\nimport { Footer } from './components/Footer';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.findFilm = React.createRef()\n\n        this.state = {\n            query:'star', //поисковой запрос в API\n            currentPage: 1, //страница, с которой начинает выполянться запрос\n            totalPages: 0,  //найдено страниц в API\n            totalResults: 0, //найдено результатов в API\n            movies: [] //найдено фильмов в API\n        }\n\n    }\n\n    handleChange = (event) => {\n        this.setState({query: event.target.value});\n    }\n\n    formSubmitHandler(event) {\n        event.preventDefault();\n        return false;\n    };\n\n    submitForm = () => {\n        if (this.state.query.length >0) {\n            this.searchMovies(this.state.query);\n        }\n    };\n\n    searchMovies = (filter = {}) => {\n        moviesApi.fetchMovies({\n                params: {\n                    query:this.state.query,\n                    'language': 'ru-RU',\n                    'include_adult': 'false',\n                    ...filter\n                }\n            })\n            .then(response => {\n                this.setState({\n                    totalPages: response.total_pages,\n                    totalResults: response.total_results,\n                    movies: response.results,\n                    ...filter\n                });\n            })\n            .catch(error => this.setState({error: true}));\n\n    };\n\n    changePage = (event, page) => {\n\n        this.searchMovies({ page });\n    };\n\n    render() {\n        const infoMessage = this.state.error ? <p className=\"App-error\">Movies can't be loaded on this page</p> : '';\n\n        return (\n            <div>\n                <Header\n                    query={this.state.query}\n                    page={this.state.page}\n                    totalPages={this.state.totalPages}\n                    handleChange = {this.handleChange}\n                    formSubmitHandler = {this.formSubmitHandler}\n                    submitForm = {this.submitForm}\n                />\n                 <div className={ this.state.query.length === 0 ? \"App-content\" : \"App-content_clean\" }>\n                    {this.state.query ? <MovieList data = {this}/> : infoMessage}\n                </div>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}